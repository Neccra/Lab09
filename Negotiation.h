#ifndef NEGOTIATION_H
#define NEGOTIATION_H

#include <stdint.h>

/**
 *  The outcome of the negotiation is a coin flip, and can be either HEADS or TAILS:
 */
typedef enum{
	HEADS, TAILS,
} NegotiationOutcome;


/**
 *  All negotiation data occurs on uniformly-sized data packets.
 */
typedef uint16_t NegotiationData;

/**
 * The commitment packet is generated using a hash that utilizes a public key, which is defined here:
 */
#define PUBLIC_KEY 0xBEEF

/**
 * This function implements a one-way hash.  It maps its input, A, 
 * into an image, #a, in a way that is hard to reverse, but easy 
 * to reproduce.
 * @param secret        //A number that a challenger commits to
 * @return hash         //the hashed value of the commitment.
 *
 * This function implements the "Beef Hash," a variant of a Rabin hash.
 * The result is the square of the input modulo the constant key 0xBEEF.
 */
NegotiationData NegotiationHash(NegotiationData secret);

/**
 * Detect cheating.  An accepting agent will receive both a commitment hash
 * and a secret number from the challenging agent.  This function
 * verifies that the secret and the commitment hash agree, hopefully
 * detecting cheating by the challenging agent.
 *
 * @param secret        //the previously secret number that the challenging agent has revealed
 * @param commitment    //the hash of the secret number
 * @return TRUE if the commitment validates the revealed secret, FALSE otherwise
 */
int NegotiationVerify(NegotiationData secret, NegotiationData commitment);

/**
 * The coin-flip protocol uses random numbers generated by both
 * agents to determine the outcome of the coin flip.
 *
 * The parity of a bitstring is 1 if there are an odd number of one bits,
 *   and 0 otherwise.
 * So, for example, the number 0b01101011 has 5 ones.  If the parity of
 * A XOR B is 1, then the outcome is HEADS.  Otherwise, the outcome is TAILS.
 */
NegotiationOutcome NegotiateCoinFlip(NegotiationData A, NegotiationData B);


#endif // NEGOTIATION_H
